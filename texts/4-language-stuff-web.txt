Работа с вебом
Да­вай научим­ся получать информа­цию с веб‑стра­ниц. Для начала нуж­но уста­новить нес­коль­ко модулей. Пишем в коман­дной стро­ке:
pip install requests
pip install html2text
Мо­дуль requests поз­воля­ет делать GET- и POST-зап­росы к веб‑стра­ницам. 
Модуль html2text слу­жит для пре­обра­зова­ния HTML-кода веб‑стра­ниц в обыч­ный текст, то есть чис­тит его от тегов HTML.

Им­порти­руем наши новые модули в начале прог­раммы и поп­робу­ем получить какую‑нибудь стра­ницу из интерне­та.
import requests
# Делаем GET-запрос
s = requests.get('http://xakep.ru')
# Печатаем код ответа сервера
print(s.status_code)
# Печатаем HTML-код
print(s.text)
Прог­рамма напеча­тает мно­го HTML-кода, из которо­го сос­тоит глав­ная стра­ница жур­нала. 
Но что, если тебе нужен толь­ко текст сай­та, а не мешани­на из тегов? 
Здесь поможет html2text. Он выделит из кода текст, заголов­ки и кар­тинки и отдаст их уже без HTML-тегов.

import requests
import html2text
# Делаем GET-запрос
s = requests.get('http://xakep.ru')
# Код ответа сервера
print(s.status_code)
# Создается экземпляр парсера
d = html2text.HTML2Text()
# Параметр, влияющий на то, как парсятся ссылки
d.ignore_links = True
# Текст без HTML-тегов
c=d.handle(s.text)
print(c)

Да­вай пос­мотрим, как пос­лать обыч­ный POST-зап­рос. Пред­положим, на сай­те site.ru сущес­тву­ет скрипт guest.php, 
который POST-зап­росом при­нима­ет от фор­мы имя поль­зовате­ля name и сооб­щение message, а затем пос­тит их в гос­тевую кни­гу.
import requests
# Переменные, которые нужно отправить POST-запросом
user = 'coolhacker'
message = 'You have been pwned!!!'
# Делаем POST-запрос и передаем словарь из полей
r = requests.post("http://site.ru/guest.php", data={'user': user, 'message': message})
print(r.status_code)

Те­перь давай отпра­вим зап­рос с фай­лом payload.php во вло­жении и теми же дву­мя полями фор­мы, 
что и в пре­дыду­щем зап­росе. Файл при­дет на сер­вер под име­нем misc.php.
import requests
user = 'kitty2007'
message = '(* ^ ω ^)'
# Открываем файл в бинарном режиме
with open('payload.php', 'rb') as f:
    # POST-запрос с отправкой файла
    r = requests.post('http://site.ru/upload.php', files={'misc.php': f}, data={'user': user, 'message': message})
Ос­талось научить­ся ска­чивать фай­лы. Это во мно­гом похоже на зап­рос стра­ниц, 
но делать это луч­ше в потоко­вом режиме (stream=True). Так­же нам понадо­бит­ся модуль shutil, 
в котором есть удоб­ная фун­кция copyfileobj. Она поз­воля­ет копиро­вать содер­жимое дво­ичных фай­лов 
— в нашем слу­чае из интерне­та к нам на диск.

import requests
import shutil
import os
# Файл, который надо скачать
s = 'https://xakep.ru/robots.txt'
# С помощью функции os.path.split(s) вытаскиваем из строки путь к файлу и его имя
dirname, filename = os.path.split(s)
# GET-запрос в режиме stream=True для скачивания файла
r = requests.get(s, stream=True)
# Если ответ сервера удачен (200)
if r.status_code == 200:
    # Создаем файл и открываем его в бинарном режиме для записи
    with open(filename, 'wb') as f:
    # Декодируем поток данных на основе заголовка content-encoding
        r.raw.decode_content = True
        # Копируем поток данных из интернета в файл с помощью модуля shutil
        shutil.copyfileobj(r.raw, f)