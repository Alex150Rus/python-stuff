Замена слов:
s = 'Все лето мы пили пиво. Вот как-то открываю дверь, а на пороге Чебурашка, весь такой пьяный-пьяный, и бутылка из кармана торчит.'
Словарь:
slova = {'пили':'читали', 'пиво':'книги', 'пьяный':'начитанный', 'бутылка':'энциклопедия'}
for key in slova:
    s = s.replace(key, slova[key])
print(s)

Что­бы записать в перемен­ную нес­коль­ко строк, мож­но обер­нуть их в три оди­нар­ные кавыч­ки и делать перено­сы пря­мо в коде:
s = '''Я не люблю пить пиво.
Оно невкусное и неполезное!'''

От строк мож­но брать сре­зы как от мас­сивов, если ука­зать начало и конец подс­тро­ки в квад­ратных скоб­ках пос­ле перемен­ной. 
Позиция начина­ется с нуля.
s = 'Меня зовут Бонд, Джеймс Бонд'
a = s[11:15]

Пред­положим, тебе нуж­но най­ти в спис­ке стро­ки, которые начина­ются на https. Переби­раем их с помощью for, 
для каж­дой про­веря­ем, сов­пада­ют ли пер­вые пять зна­ков со стро­кой https, и если да, то выводим стро­ку:
mas = [ 'Это просто строка', 'https://xakep.ru', 'Еще одна строка', 'https://habr.ru' ]
for x in mas:
    if x[:5] == 'https':
        print(x)

Что­бы пос­читать количес­тво вхож­дений подс­тро­ки в стро­ку, мож­но исполь­зовать метод .count():

s = 'Прикинь, короче, я такой, короче, ему бах эксплоитом по порту, а он, короче, упал сразу!'
n = s.count('короче')
print(n)

Иног­да в начале или в кон­це стро­ки могут быть лиш­ние про­белы или перено­сы строк. Давай уда­лим их спе­циаль­ной коман­дой .strip():
s = ' Пива много не бывает!  \n'
s = s.strip()
print(s)

Что­бы опре­делить наличие подс­тро­ки в стро­ке s, мож­но исполь­зовать метод .find():
n = s.find('строка, которую ищем')
Ес­ли иско­мая подс­тро­ка най­дена, то в перемен­ную n попадет ее позиция в стро­ке, а если не най­дена, n ста­нет рав­ной -1.

Еще один стро­ковый метод — .split(). Он поз­воля­ет раз­делить стро­ку на час­ти, ука­зав в качес­тве аргу­мен­та стро­ку‑раз­делитель. 
Нап­ример, s.split('\n') раз­делит текст на абза­цы по сим­волу перено­са стро­ки. Если же оста­вить скоб­ки пус­тыми, 
то будет исполь­зован раз­делитель по умол­чанию — про­бел.

Ме­тод .join() поз­воля­ет, наобо­рот, скле­ивать стро­ки. Он при­нима­ет спи­сок и воз­вра­щает стро­ку, 
где каж­дый эле­мент спис­ка соеди­нен с дру­гим через стро­ку, у которой ты выз­вал этот метод.
s = 'вирус внедряется '
list1 = ['раз, ', 'два, ', 'три...']
print(s + s.join(list1))

Форматируем строки
Мы не раз печата­ли раз­ные вещи, соеди­няя стро­ки прос­тым сло­жени­ем. Это не всег­да удоб­но, осо­бен­но учи­тывая, 
что если попадут­ся чис­ла, то их при­дет­ся перево­дить в стро­ки фун­кци­ей str(). Есть более кра­сивый 
и удоб­ный спо­соб под­став­лять зна­чения перемен­ных внутрь строк. Точ­нее, два нем­ного раз­ных спо­соба.


Способ 1 — c помощью метода .format()
Мы можем вста­вить в стро­ку пар­ные фигур­ные скоб­ки, а затем выз­вать стро­ковый метод .format() 
и передать ему нуж­ные зна­чения в поряд­ке их под­ста­нов­ки в стро­ку.

name = 'Вася Пупкин'
age = 20
address = 'улица Пушкина, дом Колотушкина'
info = 'Имя: {}. Возраст: {}. Адрес: {}'.format(name, age, address)
print(info)
Мож­но передать информа­цию спис­ком через звез­дочку:

data = ['Вася Пупкин', 20, 'улица Пушкина, дом Колотушкина']
info = 'Имя: {}. Возраст: {}. Адрес: {}'.format(*data)
print(info)

Способ 2 — через f-строки
Дру­гой вари­ант — написать бук­ву f перед стро­кой и затем в фигур­ных скоб­ках ука­зывать непос­редс­твен­но перемен­ные.

name = 'Вася Пупкин'
age = 20
address = 'улица Пушкина, дом Колотушкина'
info = f'Имя: {name.upper()}. Возраст: {age}. Адрес: {address}'
print(info)
Глав­ное пре­иму­щес­тво это­го спо­соба в том, что ты можешь вста­вить зна­чение в стро­ку нес­коль­ко раз. 
К тому же мож­но менять зна­чения пря­мо в фигур­ных скоб­ках: спер­ва Python выпол­нит все дей­ствия в них, 
а затем под­ста­вит получен­ный резуль­тат в стро­ку. Так, метод .upper() в при­мере выше дела­ет все бук­вы заг­лавны­ми.

Пе­речис­ленных методов дос­таточ­но, что­бы ты мог делать со стро­ками что угод­но